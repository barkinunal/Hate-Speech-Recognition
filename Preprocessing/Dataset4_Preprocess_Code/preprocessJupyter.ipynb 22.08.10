{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (1,2,4,5,6,7,8,9,10,11,12,13,14,17,18,20,21,22,23,24,25,26) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RT @Youngvickmane3: Horse face hoe stop playin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Alex Brosas another idiot #ALDUBKSGoesToUS  ht...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>RT @ItIzBiz: as Nancy Reagan would say, 'just ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>RT @JakellDaGOAT: Not being homophobic here......</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>RT @MailOnline: The Nazi death gas so horrific...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text\n",
       "0  RT @Youngvickmane3: Horse face hoe stop playin...\n",
       "1  Alex Brosas another idiot #ALDUBKSGoesToUS  ht...\n",
       "2  RT @ItIzBiz: as Nancy Reagan would say, 'just ...\n",
       "3  RT @JakellDaGOAT: Not being homophobic here......\n",
       "4  RT @MailOnline: The Nazi death gas so horrific..."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets = pd.read_csv(\"hatespeech_features.csv\")\n",
    "tweets_df = pd.DataFrame(tweets)\n",
    "tweets_df = tweets_df[[\"text\"]]\n",
    "tweets_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "99799\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label\n",
       "0     1\n",
       "1     1\n",
       "2     1\n",
       "3     1\n",
       "4     0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = pd.read_csv(\"hatespeech_labels.csv\")\n",
    "print(len(labels))\n",
    "labels_df = pd.DataFrame(labels[\"label\"])\n",
    "labels_df.loc[(labels_df.label == 'abusive'),'label'] = '1'\n",
    "labels_df.loc[(labels_df.label == 'hateful'),'label'] = '1'\n",
    "labels_df.loc[(labels_df.label == 'normal'),'label'] = '0'\n",
    "\n",
    "\n",
    "\n",
    "labels_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'RT @Youngvickmane3: Horse face hoe stop playing before I show the world yo lil ugly ass'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data = pd.concat([tweets_df, labels_df], axis=1)\n",
    "new_data = new_data[new_data.label != 'spam']\n",
    "new_data = new_data.dropna()\n",
    "onlyOnes = new_data[new_data.label == \"1\"]\n",
    "onlyZeros = new_data[new_data.label == \"0\"]\n",
    "frames = [onlyOnes, onlyZeros]\n",
    "new_data = pd.concat(frames)\n",
    "new_data[\"text\"][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_noisy_data(data):\n",
    "    i = 0\n",
    "    tweets = []\n",
    "    for tweet in data[\"text\"]:\n",
    "        # URLs\n",
    "        #if i < 10:\n",
    "            #print(tweet)\n",
    "            \n",
    "        new_tweet = re.sub(\"http\\S+\", \" \", tweet)\n",
    "        # RTs\n",
    "        new_tweet = re.sub('RT @[\\w_]+:', ' ', new_tweet)\n",
    "        # hashtags\n",
    "        new_tweet = re.sub('#[\\w_]+', ' ', new_tweet)\n",
    "        # usernames\n",
    "        new_tweet = re.sub(r\"@\\S+\", \" \", new_tweet)\n",
    "        \n",
    "        new_tweet = re.sub('[0-9]', ' ', str(new_tweet))\n",
    "        new_tweet = re.sub('\\s+', ' ', new_tweet)\n",
    "        new_tweet = re.sub(r'[^\\w\\s]','',new_tweet)\n",
    "        \n",
    "        tweets.append(new_tweet)\n",
    "        #print(new_tweet)\n",
    "        i+=1\n",
    "    \n",
    "    return tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "cleaned_tweets = clean_noisy_data(new_data)\n",
    "#cleaned_tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(cleaned_tweets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Horse face hoe stop playing before I show the...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Alex Brosas another idiot</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>as Nancy Reagan would say just say FUCKING NO...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Not being homophobic here but uhhhhhhhhhhh I ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>I hate er chase because if the Bitch that work...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29693</td>\n",
       "      <td>I stopped fucking with people who never fell t...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29694</td>\n",
       "      <td>She must of made a ugly bitch mad af Tried to...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29695</td>\n",
       "      <td>this fucked up bruh</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29696</td>\n",
       "      <td>Oasis cover of The Who  My Generation is fuck...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29697</td>\n",
       "      <td>ion wish a heartbreak on anybody  not even my...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29698 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       0 label\n",
       "0       Horse face hoe stop playing before I show the...     1\n",
       "1                             Alex Brosas another idiot      1\n",
       "2       as Nancy Reagan would say just say FUCKING NO...     1\n",
       "3       Not being homophobic here but uhhhhhhhhhhh I ...     1\n",
       "4      I hate er chase because if the Bitch that work...     0\n",
       "...                                                  ...   ...\n",
       "29693  I stopped fucking with people who never fell t...     0\n",
       "29694   She must of made a ugly bitch mad af Tried to...     0\n",
       "29695                               this fucked up bruh      0\n",
       "29696   Oasis cover of The Who  My Generation is fuck...     0\n",
       "29697   ion wish a heartbreak on anybody  not even my...     0\n",
       "\n",
       "[29698 rows x 2 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_tweets_df = pd.DataFrame(cleaned_tweets)\n",
    "cleaned_data = pd.concat([cleaned_tweets_df, labels_df], axis=1)\n",
    "cleaned_data = cleaned_data.dropna()\n",
    "cleaned_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "cleaned_data.to_csv(\"fourth_label_cleared.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
